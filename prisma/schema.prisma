generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id                   String   @id @default(uuid())
  avatar               String?
  fullname             String   @db.VarChar(255)
  birthdate            DateTime
  cpf                  String   @unique
  fkGender             String   @map("fk_gender")
  email                String   @unique
  fkMaritalStatus      String   @map("fk_marital_level")
  fkEducationLevel     String   @map("fk_education_level")
  numberOfChildren     Int      @map("number_of_children")
  birthplace           String
  codeName             String   @map("code_name")
  fkUnit               String   @map("fk_unit")
  fkAdministrativeRole String?  @map("fk_function")
  fkJobStatus          String   @map("fk_job_status")
  militaryId           String?  @map("military_id")
  fkRank               String?  @map("fk_rank")
  fkBoard              String?  @map("fk_board")
  fkSpecialty          String?  @map("fk_specialyy")
  password             String
  createdAt            DateTime @default(now()) @map("created_at")
  createdBy            String?  @unique @map("created_by")

  Gender             Gender              @relation(fields: [fkGender], references: [id])
  Address            EmployeeAddress?    @relation(name: "address")
  MaritalStatus      MaritalStatus       @relation(fields: [fkMaritalStatus], references: [id])
  EducationLevel     EducationLevel      @relation(fields: [fkEducationLevel], references: [id])
  Unit               Unit                @relation(fields: [fkUnit], references: [id])
  AdministrativeRole AdministrativeRole? @relation(fields: [fkAdministrativeRole], references: [id])
  JobStatus          JobStatus           @relation(fields: [fkJobStatus], references: [id])
  Rank               Rank?               @relation(fields: [fkRank], references: [id])
  Board              Board?              @relation(fields: [fkBoard], references: [id])
  Specialty          Specialty?          @relation(fields: [fkSpecialty], references: [id])
  CreatedBy          Employee?           @relation(name: "employee_created_by", fields: [createdBy], references: [id])
  Phones             EmployeePhone[]     @relation(name: "phones")

  RegisteredGenders             Gender[]             @relation(name: "gender_created_by")
  RegisteredAddresses           EmployeeAddress[]    @relation(name: "address_created_by")
  RegisteredMaritalStatus       MaritalStatus[]      @relation(name: "marital_status_created_by")
  RegisteredEducationLevels     EducationLevel[]     @relation(name: "education_level_created_by")
  RegisteredUnits               Unit[]               @relation(name: "unit_created_by")
  RegisteredAdministrativeRoles AdministrativeRole[] @relation(name: "administrative_role_created_by")
  RegisteredJobStatus           JobStatus[]          @relation(name: "job_status_created_by")
  RegisteredRanks               Rank[]               @relation(name: "rank_created_by")
  RegisteredBoards              Board[]              @relation(name: "board_created_by")
  RegisteredSpecialties         Specialty[]          @relation(name: "specialty_created_by")
  RegisteredEmployees           Employee[]           @relation(name: "employee_created_by")
  RegisteredPhones              EmployeePhone[]      @relation(name: "phone_created_by")
  RegisteredUpdates             EmployeeUpdate[]     @relation(name: "update_created_by")
  RegisteredClients             Client[]             @relation(name: "client_created_by")
  RegisteredClientPhones        ClientPhone[]        @relation(name: "client_phone_created_by")
  RegisteredClientAddresses     ClientAddress[]      @relation(name: "client_address_created_by")
  RegisteredClientUpdates       ClientUpdate[]       @relation(name: "client_update_created_by")
  RegisteredClientRecords       ClientRecord[]       @relation(name: "client_record_created_by")
  RegisteredRecordStatus        RecordStatus[]       @relation(name: "record_status_created_by")
  RegosteredTypeOfBonds         TypeOfBond[]         @relation(name: "type_of_bond_created_by")

  EmployeeUpdates EmployeeUpdate[] @relation(name: "updated_associated_with")

  @@map("employees")
}

model Client {
  id                   String   @id @default(uuid())
  avatar               String?
  fullname             String   @db.VarChar(255)
  birthdate            DateTime
  cpf                  String   @unique
  fkGender             String   @map("fk_gender")
  email                String   @unique
  fkMaritalStatus      String   @map("fk_marital_level")
  fkEducationLevel     String   @map("fk_education_level")
  numberOfChildren     Int      @map("number_of_children")
  birthplace           String
  codeName             String   @map("code_name")
  fkUnit               String   @map("fk_unit")
  fkAdministrativeRole String?  @map("fk_function")
  fkJobStatus          String   @map("fk_job_status")
  militaryId           String?  @map("military_id")
  fkRank               String?  @map("fk_rank")
  fkBoard              String?  @map("fk_board")
  fkPolicyHolder       String?  @map("fk_policy_holder")
  fkTypeOfBond         String?  @map("fk_type_of_bond")
  createdAt            DateTime @default(now()) @map("created_at")
  createdBy            String   @unique @map("created_by")

  Gender             Gender              @relation(fields: [fkGender], references: [id])
  Address            ClientAddress?      @relation(name: "address")
  MaritalStatus      MaritalStatus       @relation(fields: [fkMaritalStatus], references: [id])
  EducationLevel     EducationLevel      @relation(fields: [fkEducationLevel], references: [id])
  Unit               Unit                @relation(fields: [fkUnit], references: [id])
  AdministrativeRole AdministrativeRole? @relation(fields: [fkAdministrativeRole], references: [id])
  JobStatus          JobStatus           @relation(fields: [fkJobStatus], references: [id])
  Rank               Rank?               @relation(fields: [fkRank], references: [id])
  Board              Board?              @relation(fields: [fkBoard], references: [id])
  PolicyHolder       Client?             @relation(name: "policyHolderDependent", fields: [fkPolicyHolder], references: [id])
  TypeOfBond         TypeOfBond?         @relation(fields: [fkTypeOfBond], references: [id])
  CreatedBy          Employee            @relation(name: "client_created_by", fields: [createdBy], references: [id])
  Phones             ClientPhone[]       @relation(name: "phones")
  Dependents         Client[]            @relation(name: "policyHolderDependent")

  ClientUpdates ClientUpdate[] @relation(name: "updated_associated_with")

  @@map("clients")
}

model EmployeePhone {
  employeeId String   @map("employee_id")
  phone      String
  createdAt  DateTime @default(now()) @map("created_at")
  createdBy  String   @map("created_by")

  Employee  Employee @relation(name: "phones", fields: [employeeId], references: [id])
  CreatedBy Employee @relation(name: "phone_created_by", fields: [createdBy], references: [id])

  @@id([employeeId, phone])
  @@unique([employeeId, phone])
  @@map("employee_phones")
}

model EmployeeAddress {
  employeeId String   @id @map("employee_id")
  postalCode String   @map("postal_code")
  number     Int
  createdAt  DateTime @default(now()) @map("created_at")
  createdBy  String   @map("created_by")

  Employee  Employee @relation("address", fields: [employeeId], references: [id])
  CreatedBy Employee @relation(name: "address_created_by", fields: [createdBy], references: [id])

  @@map("employee_addresses")
}

model EmployeeUpdate {
  id             String   @id @default(uuid())
  note           String
  associatedWith String   @map("associated_with")
  createdAt      DateTime @default(now()) @map("created_at")
  createdBy      String   @unique @map("created_by")

  AssociatedWith Employee @relation("updated_associated_with", fields: [associatedWith], references: [id])
  CreatedBy      Employee @relation("update_created_by", fields: [createdBy], references: [id])

  @@map("employee_updates")
}

model ClientPhone {
  clientId  String   @map("clientId")
  phone     String
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String   @map("created_by")

  Client    Client   @relation(name: "phones", fields: [clientId], references: [id])
  CreatedBy Employee @relation(name: "client_phone_created_by", fields: [createdBy], references: [id])

  @@id([clientId, phone])
  @@unique([clientId, phone])
  @@map("client_phones")
}

model ClientAddress {
  clientId   String   @id @map("clientId")
  postalCode String   @map("postal_code")
  number     Int
  createdAt  DateTime @default(now()) @map("created_at")
  createdBy  String   @map("created_by")

  Client    Client   @relation("address", fields: [clientId], references: [id])
  CreatedBy Employee @relation(name: "client_address_created_by", fields: [createdBy], references: [id])

  @@map("client_addresses")
}

model ClientUpdate {
  id             String   @id @default(uuid())
  note           String
  associatedWith String   @map("associated_with")
  createdAt      DateTime @default(now()) @map("created_at")
  createdBy      String   @unique @map("created_by")

  AssociatedWith Client   @relation("updated_associated_with", fields: [associatedWith], references: [id])
  CreatedBy      Employee @relation("client_update_created_by", fields: [createdBy], references: [id])

  @@map("client_updates")
}

model ClientRecord {
  id         String   @id @default(uuid())
  fkClientId String   @map("fk_client_id")
  fkStatusId String   @map("fk_status_id")
  createdAt  DateTime @default(now()) @map("created_at")
  createdBy  String   @unique @map("created_by")

  RecordStatus RecordStatus @relation(fields: [fkStatusId], references: [id])

  CreatedBy Employee @relation("client_record_created_by", fields: [createdBy], references: [id])

  @@map("client_records")
}

model RecordStatus {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String   @map("created_by")

  CreatedBy Employee @relation("record_status_created_by", fields: [createdBy], references: [id])

  ClientRecord ClientRecord[]

  @@map("record_status")
}

model Gender {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String   @map("created_by")

  CreatedBy Employee @relation("gender_created_by", fields: [createdBy], references: [id])

  Employees Employee[]
  Client    Client[]

  @@map("genders")
}

model MaritalStatus {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String   @map("created_by")

  CreatedBy Employee @relation("marital_status_created_by", fields: [createdBy], references: [id])

  Employees Employee[]
  Client    Client[]

  @@map("marital_status")
}

model EducationLevel {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String   @map("created_by")

  CreatedBy Employee @relation("education_level_created_by", fields: [createdBy], references: [id])

  Employees Employee[]
  Client    Client[]

  @@map("education_levels")
}

model Unit {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String   @map("created_by")

  CreatedBy Employee @relation("unit_created_by", fields: [createdBy], references: [id])

  Employees Employee[]
  Client    Client[]

  @@map("units")
}

model AdministrativeRole {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String   @map("created_by")

  CreatedBy Employee @relation("administrative_role_created_by", fields: [createdBy], references: [id])

  Employee Employee[]
  Client   Client[]

  @@map("administrative_roles")
}

model JobStatus {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String   @map("created_by")

  CreatedBy Employee @relation("job_status_created_by", fields: [createdBy], references: [id])

  Employees Employee[]
  Client    Client[]

  @@map("job_status")
}

model Rank {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String   @map("created_by")

  CreatedBy Employee @relation("rank_created_by", fields: [createdBy], references: [id])

  Employees Employee[]
  Client    Client[]

  @@map("ranks")
}

model Board {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String   @map("created_by")

  CreatedBy Employee @relation("board_created_by", fields: [createdBy], references: [id])

  Employees Employee[]
  Client    Client[]

  @@map("boards")
}

model Specialty {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String   @map("created_by")

  CreatedBy Employee @relation("specialty_created_by", fields: [createdBy], references: [id])

  Employees Employee[]

  @@map("specialties")
}

model TypeOfBond {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String   @map("created_by")

  CreatedBy Employee @relation("type_of_bond_created_by", fields: [createdBy], references: [id])

  Client Client[]

  @@map("type_of_bonds")
}
