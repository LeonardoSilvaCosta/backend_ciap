generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  fullname         String    @db.VarChar(255)
  firstPhone       String    @map("first_phone")
  birthdate        DateTime?
  cpf              String?   @unique
  fkGender         String    @map("fk_gender")
  email            String?   @unique
  fkMaritalStatus  String?   @map("fk_marital_level")
  fkEducationLevel String?   @map("fk_education_level")
  numberOfChildren Int?      @map("number_of_children")
  birthplace       String?
  createdAt        DateTime  @default(now()) @map("created_at")
  password         String

  Registrant   Employee? @relation(name: "registrant", fields: [fkRegistrant], references: [userId])
  fkRegistrant String?   @unique @map("fk_registrant")

  Employee          Employee[]
  Phone             Phone[]
  Gender            Gender              @relation(fields: [fkGender], references: [id])
  MaritalStatus     MaritalStatus?      @relation(fields: [fkMaritalStatus], references: [id])
  EducationLevel    EducationLevel?     @relation(fields: [fkEducationLevel], references: [id])
  Address           Address?
  UpdateInformation UpdateInformation[]

  @@unique([fullname, firstPhone])
  @@map("users")
}

model Employee {
  userId               String   @id @map("user_id")
  alias                String
  unitId               String   @map("unit_id")
  administrativeRoleId String?  @map("administrative_role_id")
  employeementStatusId String   @map("employeement_status_id")
  rankId               String   @map("rank_id")
  personnelId          String?  @map("personnel_id")
  inclusionDate        DateTime @map("inclusion_date")

  Unit               Unit                @relation(fields: [unitId], references: [id])
  AdministrativeRole AdministrativeRole? @relation(fields: [administrativeRoleId], references: [id])
  EmployeementStatus EmployeementStatus  @relation(fields: [employeementStatusId], references: [id])
  Rank               Rank                @relation(fields: [rankId], references: [id])
  Personnel          Personnel?          @relation(fields: [personnelId], references: [id])
  User               User                @relation(fields: [userId], references: [id])

  Especialist            Especialist[]
  UpdateInformation      UpdateInformation?
  RegisteredUsers        User?              @relation(name: "registrant")
  employeeUserFullname   String             @db.VarChar(255)
  employeeUserFirstPhone String

  @@map("employees")
}

model Especialist {
  employeeId String @id @map("employee_id")

  fkSpecialty        String @map("fk_specialty")
  concilRegistration String @unique @map("concil_registration")

  especialty Especialty @relation(fields: [fkSpecialty], references: [id])

  employee Employee @relation(fields: [employeeId], references: [userId])

  @@map("especialists")
}

model Phone {
  userId   String @map("user_id")
  telefone String

  user User @relation(fields: [userId], references: [id])

  @@id([userId, telefone])
  @@unique([userId, telefone])
  @@map("phones")
}

model Gender {
  id   String @id @default(uuid())
  name String @unique

  users User[]

  @@map("genders")
}

model Address {
  id         String @id @default(uuid())
  postalCode String @map("postal_code")
  number     Int

  user   User   @relation(fields: [fkUser], references: [id])
  fkUser String @unique @map("fk_user")

  @@map("addresses")
}

model MaritalStatus {
  id   String @id @default(uuid())
  name String @unique

  users User[]

  @@map("marital_status")
}

model EducationLevel {
  id   String @id @default(uuid())
  name String @unique

  users User[]

  @@map("education_levels")
}

model Unit {
  id   String @id @default(uuid())
  name String @unique

  employee Employee[]

  @@map("units")
}

model AdministrativeRole {
  id   String @id @default(uuid())
  name String @unique

  employee Employee[]

  @@map("administrative_roles")
}

model EmployeementStatus {
  id   String @id @default(uuid())
  name String @unique

  employee Employee[]

  @@map("employeement_status")
}

model Rank {
  id   String @id @default(uuid())
  name String @unique

  employee Employee[]

  @@map("ranks")
}

model Personnel {
  id   String @id @default(uuid())
  name String @unique

  employee Employee[]

  @@map("personnels")
}

model Especialty {
  id   String @id @default(uuid())
  name String @unique

  especialists Especialist[]

  @@map("specialties")
}

model UpdateInformation {
  employeeId String @unique @map("employee_id")
  userId     String @unique @map("user_id")
  createdAt  String @map("created_at")

  registrant Employee @relation(fields: [employeeId], references: [userId])
  user       User     @relation(fields: [userId], references: [id])

  @@id([employeeId, userId])
  @@map("update_informations")
}
